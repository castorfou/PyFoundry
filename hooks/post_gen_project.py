#!/usr/bin/env python3
"""
Hook Cookiecutter - V√©rifications post-g√©n√©ration pour le Dev Container.
"""
import subprocess
import sys
import os
import shutil # <- Import n√©cessaire pour la suppression de dossier

TEST_IMAGE = "ghcr.io/devcontainers/features/hello:1"
PROJECT_DIR = os.path.realpath(os.path.curdir)

def check_docker_available():
    """V√©rifie si Docker est install√© et en cours d'ex√©cution."""
    print("INFO: V√©rification de la disponibilit√© de Docker...")
    try:
        result = subprocess.run(
            ["docker", "--version"],
            capture_output=True,
            text=True,
            check=True
        )
        print(f"‚úÖ Docker disponible: {result.stdout.strip()}")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker n'est pas install√© ou n'est pas accessible dans le PATH.")
        return False

def check_ghcr_auth():
    """Teste l'authentification √† ghcr.io en t√©l√©chargeant une image de test."""
    print(f"INFO: V√©rification de l'authentification √† ghcr.io en t√©l√©chargeant '{TEST_IMAGE}'...")
    try:
        subprocess.run(
            ["docker", "pull", TEST_IMAGE],
            check=True,
            capture_output=True,
            text=True
        )
        print("‚úÖ Authentification √† ghcr.io r√©ussie.")
        subprocess.run(["docker", "rmi", TEST_IMAGE], capture_output=True)
        return True
    except subprocess.CalledProcessError as e:
        error_message = e.stderr.lower()
        if "denied" in error_message or "authentication required" in error_message:
            print("‚ùå √âchec de l'authentification √† ghcr.io.")
        else:
            print(f"‚ùå √âchec du t√©l√©chargement. Erreur Docker:\n{e.stderr}")
        return False

def handle_auth_failure():
    """Affiche les instructions, nettoie le projet g√©n√©r√© et quitte proprement."""
    print("\n" + "="*80)
    print("üõë ACTION REQUISE : Authentification au GitHub Container Registry (ghcr.io)")
    print("   Le Dev Container de ce projet a besoin de t√©l√©charger des outils depuis GitHub.")
    print("\n   Veuillez suivre ces √©tapes dans votre terminal :")
    print("   1. Cr√©ez un Personal Access Token (classic) avec la permission 'read:packages'.")
    print("      Lien direct : https://github.com/settings/tokens/new")
    print("   2. Ex√©cutez la commande suivante en rempla√ßant USERNAME et en utilisant")
    print("      votre token comme mot de passe :")
    print("      docker login ghcr.io -u VOTRE_USERNAME_GITHUB")
    print("="*80)
    
    # Suppression du projet qui vient d'√™tre g√©n√©r√©
    try:
        print(f"\nINFO: La cr√©ation du projet est annul√©e. Suppression de '{PROJECT_DIR}'...")
        # On se d√©place dans le r√©pertoire parent pour pouvoir supprimer le dossier actuel
        parent_dir = os.path.dirname(PROJECT_DIR)
        os.chdir(parent_dir)
        shutil.rmtree(PROJECT_DIR)
        print("INFO: Nettoyage termin√©.")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors du nettoyage du dossier du projet : {e}")

    # On quitte avec un code de succ√®s pour ne pas afficher le traceback de cruft
    sys.exit(0)

def main():
    """Fonction principale du hook."""
    if not check_docker_available():
        print("\n‚ö†Ô∏è  Le projet a √©t√© cr√©√©, mais le Dev Container ne pourra pas √™tre construit.")
        print("   Installez Docker, puis suivez les instructions du README.md.")
        sys.exit(0)

    if not check_ghcr_auth():
        handle_auth_failure()

    print("\n‚úÖ Configuration valid√©e ! Le projet a √©t√© cr√©√© avec succ√®s.")
    print(f"   Votre projet se trouve ici : {PROJECT_DIR}")
    print("   Ouvrez ce dossier dans VS Code pour d√©marrer le Dev Container.")

if __name__ == "__main__":
    main()